#ifndef _C8E_CHIP8_HH_
#define _C8E_CHIP8_HH_

#include <array>
#include <cstdint>

constexpr std::array<uint8_t, 80> font_set{
    0xF0, 0x90, 0x90, 0x90, 0xF0,  // 0
    0x20, 0x60, 0x20, 0x20, 0x70,  // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0,  // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0,  // 3
    0x90, 0x90, 0xF0, 0x10, 0x10,  // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0,  // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0,  // 6
    0xF0, 0x10, 0x20, 0x40, 0x40,  // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0,  // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0,  // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90,  // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0,  // B
    0xF0, 0x80, 0x80, 0x80, 0xF0,  // C
    0xE0, 0x90, 0x90, 0x90, 0xE0,  // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0,  // E
    0xF0, 0x80, 0xF0, 0x80, 0x80,  // F
};

class Chip8 {
 public:
  bool                      drawFlag = false;
  std::array<uint8_t, 2048> Display{};

  void init_or_reset();
  void dump();
  void load_rom(const char* filename);
  void emulate_cycle();

 private:
  uint8_t DT{};  // Delay Timer
  uint8_t ST{};  // Sound Timer
  uint8_t SP{};  // Stack Pointer

  uint16_t PC{};  // Program Counter
  uint16_t I{};
  uint16_t OC{};  // Opcode

  std::array<uint8_t, 16>   V{};  // General Purpose Registers
  std::array<uint8_t, 16>   Key{};
  std::array<uint8_t, 4096> Memory{};

  std::array<uint16_t, 16> Stack{};
};
#endif
